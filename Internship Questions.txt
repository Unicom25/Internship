Question 1: What is Pandas, and why is it commonly used in data cleaning tasks?

--Pandas is an open-source data manipulation and analysis library for Python. It provides data structures like DataFrames and Series, along with functions to manipulate and analyze structured data. Pandas is widely used in data science, machine learning, and other data-related fields due to its simplicity, flexibility, and powerful capabilities.
It is commonly used because it allows you to store and manipulate heterogeneous data types and handle missing data easily.


Question 2: Given a DataFrame with missing values, how would you check for missing
values in each column and count the total number of missing values?

--We can check the missing values by using 'isnull' and to count the total number of missing values we can use 'isnull().sum().
This will give all the missing values in the dataframe.



Question 3: How can you remove duplicates from a DataFrame while retaining the first
occurrence of each unique row?

--You can use the drop_duplicates() method to remove duplicate rows from a DataFrame while retaining the first occurrence of each unique row.
 The keep parameter is used to specify whether to keep the first occurrence, the last occurrence, or none (remove all duplicates).



Question 4: If you have a DataFrame with a column containing string values, how can
you convert all the values in that column to lowercase?

--You can use the str.lower() method to convert all the string values in a column to lowercase in a Pandas DataFrame. 



Question 5: How do you replace missing values in a DataFrame with a specific value,
like 0, for a particular column?


--You can use the fillna() method in Pandas to replace missing values in a DataFrame with a specific value, such as 0, for a particular column.



Question 6: If you have a DataFrame with a datetime column, how can you extract the
year, month, and day into separate columns?


--If you have a DataFrame with a datetime column in Pandas, you can use the dt accessor to extract the year, month, and day into separate columns.



Question 7: How can you filter rows in a DataFrame where a specific column's values
meet a certain condition (e.g., all rows where 'age' is greater than 30)?


--You can use boolean indexing to filter rows in a Pandas DataFrame based on a specific column's values meeting a certain condition.



Question 8: What is the purpose of the .apply() function in Pandas, and how would you
use it to create a new column based on values from existing columns?


--The apply() function in Pandas is used to apply a function along the axis of a DataFrame or Series. It is a versatile function that allows you to transform data in a variety of ways. You can use apply() to perform operations on rows or columns of a DataFrame, as well as on individual elements.
You can customize the custom_function according to your specific requirements, allowing you to perform more complex operations on existing columns and create new columns based on those operations. The apply() function is particularly useful when you need to perform element-wise operations or operations that involve multiple columns.


Question 9: Suppose you want to merge two DataFrames, 'df1' and 'df2,' on a common
column 'key.' How would you perform this merge operation in Pandas?


--In Pandas, you can use the merge() function to merge two DataFrames based on a common column. When merging, you specify the column (or columns) on which to merge, and Pandas will align the rows based on the values in that column.



Question 10: You have a DataFrame with a column containing messy text data. How can
you clean and standardize the text data (e.g., remove punctuation and convert to
lowercase) in that column?


--First we will use user defined function to make a function. Then we will use apply() function to clean and standardize text data in a Pandas DataFrame column.





